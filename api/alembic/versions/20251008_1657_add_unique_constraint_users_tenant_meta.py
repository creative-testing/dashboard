"""add_unique_constraint_users_tenant_meta

Revision ID: 5d5e6e73a0ec
Revises: 035e17324270
Create Date: 2025-10-08 16:57:45.741085

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5d5e6e73a0ec'
down_revision = '035e17324270'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_ad_accounts_tenant_fb'), 'ad_accounts', type_='unique')
    op.drop_constraint(op.f('uq_oauth_tokens_user_provider'), 'oauth_tokens', type_='unique')
    op.alter_column('users', 'meta_user_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=64),
               existing_nullable=True)
    op.drop_index(op.f('uq_users_tenant_email_lower'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)

    # Add unique constraint on (tenant_id, meta_user_id) to prevent duplicate OAuth users
    # Use execute to make it idempotent (IF NOT EXISTS)
    op.execute("""
        ALTER TABLE users ADD CONSTRAINT IF NOT EXISTS uq_users_tenant_meta
        UNIQUE (tenant_id, meta_user_id)
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop unique constraint on (tenant_id, meta_user_id) if exists
    op.execute("ALTER TABLE users DROP CONSTRAINT IF EXISTS uq_users_tenant_meta")

    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('uq_users_tenant_email_lower'), 'users', ['tenant_id', sa.literal_column('lower(email::text)')], unique=True)
    op.alter_column('users', 'meta_user_id',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.create_unique_constraint(op.f('uq_oauth_tokens_user_provider'), 'oauth_tokens', ['user_id', 'provider'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_ad_accounts_tenant_fb'), 'ad_accounts', ['tenant_id', 'fb_account_id'], postgresql_nulls_not_distinct=False)
    # ### end Alembic commands ###
