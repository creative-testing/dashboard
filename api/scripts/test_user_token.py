#!/usr/bin/env python3
"""
Script de test ultra-simple pour v√©rifier un User Access Token
Teste si on peut vraiment r√©cup√©rer les ad accounts d'un utilisateur
"""
import requests
import sys
from typing import Dict, List

# Credentials de l'app
APP_ID = "1496103148207058"
APP_SECRET = "1ef259878655b1b1a77389b493e3aa55"


def print_section(title: str):
    """Print une section avec s√©paration"""
    print(f"\n{'='*70}")
    print(f"  {title}")
    print(f"{'='*70}\n")


def test_token_validity(token: str) -> Dict:
    """
    V√©rifie si le token est valide et r√©cup√®re les infos utilisateur

    Returns:
        Dict avec les infos user si valide, sinon None
    """
    print_section("üîç TEST 1: Validit√© du token")

    try:
        response = requests.get(
            "https://graph.facebook.com/v23.0/me",
            params={"access_token": token},
            timeout=10
        )
        response.raise_for_status()
        user_data = response.json()

        print(f"‚úÖ Token VALIDE!")
        print(f"   User: {user_data.get('name', 'N/A')}")
        print(f"   User ID: {user_data.get('id', 'N/A')}")

        return user_data

    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR: Le token n'est pas valide ou a expir√©")
        if hasattr(e, 'response') and e.response is not None:
            try:
                error_data = e.response.json()
                print(f"   Message: {error_data.get('error', {}).get('message')}")
                print(f"   Code: {error_data.get('error', {}).get('code')}")
            except:
                print(f"   R√©ponse: {e.response.text}")
        return None


def test_token_permissions(token: str) -> List[str]:
    """
    R√©cup√®re les permissions accord√©es au token

    Returns:
        Liste des permissions accord√©es
    """
    print_section("üîê TEST 2: Permissions du token")

    try:
        response = requests.get(
            "https://graph.facebook.com/v23.0/me/permissions",
            params={"access_token": token},
            timeout=10
        )
        response.raise_for_status()
        perms_data = response.json()

        granted_perms = [
            p['permission']
            for p in perms_data.get('data', [])
            if p.get('status') == 'granted'
        ]

        print(f"‚úÖ Permissions accord√©es: {len(granted_perms)}")
        for perm in granted_perms:
            print(f"   ‚Ä¢ {perm}")

        # V√©rifier les permissions critiques pour le SaaS
        required_perms = ['ads_read', 'business_management']
        missing_perms = [p for p in required_perms if p not in granted_perms]

        if missing_perms:
            print(f"\n‚ö†Ô∏è  Permissions MANQUANTES pour le SaaS:")
            for perm in missing_perms:
                print(f"   ‚úó {perm}")
        else:
            print(f"\n‚úÖ Toutes les permissions n√©cessaires sont pr√©sentes!")

        return granted_perms

    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR lors de la r√©cup√©ration des permissions")
        if hasattr(e, 'response') and e.response is not None:
            print(f"   R√©ponse: {e.response.text}")
        return []


def test_ad_accounts(token: str) -> List[Dict]:
    """
    Teste l'acc√®s aux ad accounts de l'utilisateur
    C'est le test CRITIQUE pour savoir si le SaaS peut fonctionner

    Returns:
        Liste des ad accounts trouv√©s
    """
    print_section("üéØ TEST 3: Acc√®s aux Ad Accounts (CRITIQUE)")

    try:
        response = requests.get(
            "https://graph.facebook.com/v23.0/me/adaccounts",
            params={
                "access_token": token,
                "fields": "id,name,account_status,currency,timezone_name"
            },
            timeout=10
        )
        response.raise_for_status()
        accounts_data = response.json()

        accounts = accounts_data.get('data', [])

        if not accounts:
            print("‚ö†Ô∏è  Aucun ad account trouv√©")
            print("   Cela peut signifier:")
            print("   ‚Ä¢ L'utilisateur n'a pas de comptes publicitaires")
            print("   ‚Ä¢ Les permissions sont insuffisantes")
            print("   ‚Ä¢ L'app n'a pas √©t√© approuv√©e pour ces permissions")
            return []

        print(f"‚úÖ Ad Accounts trouv√©s: {len(accounts)}")
        print()
        for acc in accounts[:10]:  # Afficher max 10
            status = acc.get('account_status', 'N/A')
            status_emoji = "‚úì" if status == 1 else "‚ö†"
            print(f"   {status_emoji} {acc.get('name', 'N/A')}")
            print(f"      ID: {acc.get('id')}")
            print(f"      Currency: {acc.get('currency', 'N/A')}")
            print(f"      Status: {status}")
            print(f"      Timezone: {acc.get('timezone_name', 'N/A')}")
            print()

        if len(accounts) > 10:
            print(f"   ... et {len(accounts) - 10} autres comptes")

        return accounts

    except requests.exceptions.RequestException as e:
        print(f"‚ùå ERREUR lors de l'acc√®s aux ad accounts")
        if hasattr(e, 'response') and e.response is not None:
            try:
                error_data = e.response.json()
                error_msg = error_data.get('error', {}).get('message', 'N/A')
                error_code = error_data.get('error', {}).get('code', 'N/A')

                print(f"   Message: {error_msg}")
                print(f"   Code: {error_code}")

                if 'permissions' in error_msg.lower():
                    print()
                    print("   üí° Cela signifie probablement:")
                    print("      ‚Ä¢ L'app n'a pas demand√© les bonnes permissions")
                    print("      ‚Ä¢ Ou les permissions n'ont pas √©t√© approuv√©es (App Review)")

            except:
                print(f"   R√©ponse: {e.response.text}")
        return []


def test_insights_sample(token: str, account_id: str):
    """
    Teste si on peut r√©cup√©rer des insights pour un compte
    C'est ce que le SaaS fera en production
    """
    print_section("üìä TEST 4: Acc√®s aux Insights (donn√©es r√©elles)")

    try:
        # Tester un call simple d'insights (derni√®res 7 jours)
        response = requests.get(
            f"https://graph.facebook.com/v23.0/{account_id}/insights",
            params={
                "access_token": token,
                "fields": "account_id,account_name,impressions,spend",
                "time_range": "{'since':'2025-09-28','until':'2025-10-05'}",
                "limit": 1
            },
            timeout=10
        )
        response.raise_for_status()
        insights_data = response.json()

        data = insights_data.get('data', [])

        if data:
            print(f"‚úÖ Insights r√©cup√©r√©s avec succ√®s!")
            print(f"   Account: {data[0].get('account_name', 'N/A')}")
            print(f"   Impressions: {data[0].get('impressions', 'N/A')}")
            print(f"   Spend: {data[0].get('spend', 'N/A')}")
        else:
            print("‚ö†Ô∏è  Aucune donn√©e insights (peut-√™tre pas de d√©penses r√©centes)")

    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è  Impossible de r√©cup√©rer les insights")
        if hasattr(e, 'response') and e.response is not None:
            try:
                error_data = e.response.json()
                print(f"   Message: {error_data.get('error', {}).get('message')}")
            except:
                print(f"   R√©ponse: {e.response.text}")


def main():
    """Point d'entr√©e principal"""
    print("\n" + "="*70)
    print("  üß™ TEST USER ACCESS TOKEN - CREATIVE TESTING SAAS")
    print("="*70)
    print()
    print("üìã Ce script teste si un User Access Token fourni par Pablo")
    print("   permet de r√©cup√©rer les ad accounts et leurs donn√©es.")
    print()
    print("‚ö†Ô∏è  IMPORTANT: Le token doit √™tre envoy√© en PRIV√â (pas dans Slack)")
    print()

    # Demander le token
    if len(sys.argv) > 1:
        user_token = sys.argv[1].strip()
        print(f"‚úÖ Token fourni via argument CLI")
    else:
        print("üí° Pour obtenir un User Access Token:")
        print("   1. Pablo va sur https://developers.facebook.com/tools/accesstoken/")
        print("   2. S√©lectionne l'app 'Ads-Alchemy opt'")
        print("   3. Clique 'Generate Access Token'")
        print("   4. Copie le token et te l'envoie en PRIV√â")
        print()
        user_token = input("Colle le User Access Token (ou ENTER pour quitter): ").strip()

    if not user_token:
        print("\n‚èπÔ∏è  Aucun token fourni. Arr√™t.")
        print()
        print("üí¨ MESSAGE POUR PABLO:")
        print()
        print("   Salut Pablo,")
        print()
        print("   Pour qu'on puisse tester si l'authentification Facebook fonctionne")
        print("   correctement pour le SaaS, j'aurais besoin d'un User Access Token.")
        print()
        print("   Peux-tu:")
        print("   1. Aller sur https://developers.facebook.com/tools/accesstoken/")
        print("   2. S√©lectionner l'app 'Ads-Alchemy opt'")
        print("   3. Cliquer 'Generate Access Token'")
        print("   4. Me l'envoyer en message priv√© (PAS dans un channel)")
        print()
        print("   √áa nous permettra de v√©rifier qu'on peut bien r√©cup√©rer les ad")
        print("   accounts et leurs donn√©es, sans devoir te redemander d'infos plus tard.")
        print()
        print("   Merci!")
        print()
        sys.exit(0)

    # Lancer les tests
    user_data = test_token_validity(user_token)
    if not user_data:
        print("\n‚ùå Token invalide. Impossible de continuer.")
        sys.exit(1)

    permissions = test_token_permissions(user_token)

    accounts = test_ad_accounts(user_token)

    # Si on a des comptes, tester les insights sur le premier
    if accounts:
        first_account = accounts[0]['id']
        test_insights_sample(user_token, first_account)

    # R√©sum√© final
    print_section("üìä R√âSUM√â FINAL")

    if accounts and 'ads_read' in permissions:
        print("‚úÖ SUCC√àS COMPLET!")
        print()
        print("   ‚Ä¢ Le token fonctionne")
        print("   ‚Ä¢ Les permissions sont accord√©es")
        print("   ‚Ä¢ On peut r√©cup√©rer les ad accounts")
        print(f"   ‚Ä¢ {len(accounts)} compte(s) trouv√©(s)")
        print()
        print("üéØ CONCLUSION:")
        print("   Les credentials fournis par Pablo sont SUFFISANTS pour")
        print("   impl√©menter le SaaS OAuth complet!")
        print()
        print("   ‚úÖ On peut commencer √† coder l'impl√©mentation OAuth dans")
        print("      api/app/routers/auth.py avec confiance totale.")

    elif accounts and 'ads_read' not in permissions:
        print("‚ö†Ô∏è  PROBL√àME PARTIEL")
        print()
        print("   ‚Ä¢ Le token fonctionne")
        print("   ‚Ä¢ On peut r√©cup√©rer les ad accounts")
        print("   ‚Ä¢ MAIS: Permission 'ads_read' manquante")
        print()
        print("üéØ ACTION REQUISE:")
        print("   Pablo doit r√©g√©n√©rer un token avec les permissions:")
        print("   ‚Ä¢ ads_read")
        print("   ‚Ä¢ business_management")

    else:
        print("‚ùå PROBL√àME D√âTECT√â")
        print()
        print("   Impossible de r√©cup√©rer les ad accounts.")
        print()
        print("üéØ CAUSES POSSIBLES:")
        print("   ‚Ä¢ Permissions insuffisantes")
        print("   ‚Ä¢ L'app n'a pas √©t√© approuv√©e pour ces permissions (App Review)")
        print("   ‚Ä¢ Le compte utilisateur n'a pas de comptes publicitaires")
        print()
        print("üìã PROCHAINE √âTAPE:")
        print("   Partager ces r√©sultats avec Pablo pour comprendre le blocage.")

    print()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Interrompu par l'utilisateur")
        sys.exit(0)
