#!/usr/bin/env python3
"""
Test de l'analyse intelligente avec de vraies donn√©es Meta
"""
from meta_insights import MetaInsightsFetcher
from smart_analyzer import SmartAnalyzer
import json

def test_with_real_data():
    print("üöÄ R√âCUP√âRATION ET ANALYSE INTELLIGENTE DES DONN√âES")
    print("=" * 80)
    
    # 1. R√©cup√©rer les vraies donn√©es
    print("\nüì• R√©cup√©ration des donn√©es Meta...")
    fetcher = MetaInsightsFetcher()
    raw_data = fetcher.fetch_insights(filtering="no_filter", limit=10)
    
    if not raw_data:
        print("‚ùå Aucune donn√©e r√©cup√©r√©e")
        return
    
    print(f"‚úÖ {len(raw_data)} annonces r√©cup√©r√©es")
    
    # 2. Analyser avec l'analyseur intelligent
    print("\nüß† Analyse intelligente des annonces...")
    analyzer = SmartAnalyzer()
    
    all_insights = []
    
    for i, ad_data in enumerate(raw_data[:5], 1):  # Analyser les 5 premi√®res
        print(f"\n{'='*60}")
        print(f"üìä ANNONCE {i}: {ad_data.get('ad_name', 'N/A')}")
        print(f"{'='*60}")
        
        insights = analyzer.analyze_ad(ad_data)
        all_insights.append(insights)
        
        # Afficher les r√©sultats
        print(f"\nüí∞ M√âTRIQUES DE BASE:")
        print(f"  ‚Ä¢ D√©pense: ${insights.spend:,.2f}")
        print(f"  ‚Ä¢ Impressions: {insights.impressions:,}")
        print(f"  ‚Ä¢ CTR: {insights.ctr:.2f}%")
        print(f"  ‚Ä¢ CPM: ${insights.cpm:.2f}")
        print(f"  ‚Ä¢ ROAS: {insights.roas:.2f}")
        
        print(f"\nüîç INSIGHTS CACH√âS (ce que Pablo ne sait pas qu'il veut):")
        print(f"  ‚Ä¢ Fatigue cr√©ative: {insights.fatigue_status} (Score: {insights.fatigue_score:.0f}/100)")
        print(f"  ‚Ä¢ Qualit√© Meta: {insights.quality_status} (Score: {insights.meta_quality_score:.0f}/100)")
        print(f"  ‚Ä¢ Engagement authentique: {insights.real_engagement_rate:.2f}%")
        print(f"  ‚Ä¢ Ratio multi-clics: {insights.multi_click_ratio:.2f}x {'(Int√©r√™t √©lev√©!)' if insights.multi_click_ratio > 1.5 else ''}")
        
        if insights.video_retention_curve:
            print(f"\nüé• PERFORMANCE VID√âO:")
            print(f"  ‚Ä¢ Force du hook (3s‚Üí25%): {insights.video_hook_strength:.1f}%")
            print(f"  ‚Ä¢ Plus grosse chute: {insights.video_drop_point}")
            
            # Mini graphique de r√©tention
            print("  ‚Ä¢ Courbe de r√©tention:")
            for point, value in list(insights.video_retention_curve.items())[:5]:
                bar = "‚ñà" * int(value/5)
                print(f"    {point:>4}: {bar:<20} {value:.1f}%")
        
        if insights.funnel_scores:
            print(f"\nüîÑ ANALYSE DU FUNNEL:")
            for step, score in insights.funnel_scores.items():
                indicator = "‚úÖ" if score > 10 else "‚ö†Ô∏è" if score > 5 else "‚ùå"
                print(f"  {indicator} {step}: {score:.2f}%")
            print(f"  ‚Ä¢ Point faible: {insights.biggest_drop}")
        
        print(f"\nüí° RECOMMANDATIONS AUTOMATIQUES:")
        if insights.recommendations:
            for rec in insights.recommendations[:3]:  # Top 3 recommandations
                print(f"  {rec}")
        else:
            print("  ‚úÖ Performance optimale")
    
    # 3. R√©sum√© global
    print(f"\n{'='*80}")
    print("üìà R√âSUM√â GLOBAL DE L'ANALYSE")
    print(f"{'='*80}")
    
    # Identifier les patterns
    avg_fatigue = sum(i.fatigue_score for i in all_insights) / len(all_insights)
    avg_quality = sum(i.meta_quality_score for i in all_insights) / len(all_insights)
    
    print(f"\nüéØ INSIGHTS GLOBAUX:")
    print(f"  ‚Ä¢ Fatigue moyenne: {avg_fatigue:.0f}/100 {'‚ö†Ô∏è Rafra√Æchir cr√©atifs' if avg_fatigue > 40 else '‚úÖ'}")
    print(f"  ‚Ä¢ Qualit√© Meta moyenne: {avg_quality:.0f}/100 {'‚ö†Ô∏è Am√©liorer qualit√©' if avg_quality < 50 else '‚úÖ'}")
    
    # Top performers
    best_roas = max(all_insights, key=lambda x: x.roas)
    print(f"\nüèÜ MEILLEUR ROAS: {best_roas.ad_name} ({best_roas.roas:.2f})")
    
    best_quality = max(all_insights, key=lambda x: x.meta_quality_score)
    print(f"‚≠ê MEILLEURE QUALIT√â: {best_quality.ad_name} (Score: {best_quality.meta_quality_score:.0f})")
    
    # Sauvegarder le rapport
    report = {
        "date": fetcher.fetch_insights.__name__,
        "total_ads_analyzed": len(all_insights),
        "insights": [
            {
                "ad_name": i.ad_name,
                "spend": i.spend,
                "roas": i.roas,
                "fatigue_score": i.fatigue_score,
                "meta_quality_score": i.meta_quality_score,
                "recommendations": i.recommendations
            }
            for i in all_insights
        ]
    }
    
    with open("smart_insights_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print("\nüìÅ Rapport sauvegard√© dans smart_insights_report.json")

if __name__ == "__main__":
    test_with_real_data()