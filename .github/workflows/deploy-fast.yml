name: 🚀 Fast Deploy (Code Only)

on:
  push:
    branches: [ master ]
    paths:
      - 'docs/**/*.html'
      - 'docs/**/*.js'
      - 'docs/**/*.css'
  workflow_dispatch:

permissions:
  contents: read
  actions: read          # 👈 nécessaire pour télécharger l'artefact Pages publié
  pages: write
  id-token: write

concurrency:
  group: pages-deploy    # 👈 sérialise UNIQUEMENT la phase de déploiement
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: 📥 Checkout repo (master)
        uses: actions/checkout@v4

      - name: 📦 Récupérer le dernier site Pages publié (si disponible)
        run: |
          set -e
          mkdir -p _site_prev
          get_latest_run() {
            # Cherche d'abord un run réussi du refresh-data (le plus courant)
            gh run list --workflow ".github/workflows/refresh-data.yml" --json databaseId,conclusion -L 20 \
              | jq -r '[.[]|select(.conclusion=="success")][0].databaseId // empty'
          }
          RUN_ID="$(get_latest_run)"
          if [ -z "$RUN_ID" ]; then
            # Fallback: un run réussi du fast-deploy
            RUN_ID=$(gh run list --workflow ".github/workflows/deploy-fast.yml" --json databaseId,conclusion -L 20 \
              | jq -r '[.[]|select(.conclusion=="success")][0].databaseId // empty')
          fi

          if [ -n "$RUN_ID" ]; then
            echo "ℹ️ Téléchargement artefact Pages du run $RUN_ID…"
            gh run download "$RUN_ID" -n github-pages -D _site_prev
            # Dézip si besoin
            if compgen -G "_site_prev/*.zip" > /dev/null; then
              unzip -q _site_prev/*.zip -d _site_prev/extracted
              rm -f _site_prev/*.zip
              shopt -s dotglob
              mv _site_prev/extracted/* _site_prev/ || true
            fi
          else
            echo "⚠️ Aucun artefact précédent trouvé (premier déploiement ?)"
          fi

      - name: 🧱 Construire le bundle final (préserver data/, mettre à jour le code)
        run: |
          set -e
          mkdir -p _site
          # Base = dernier site publié si dispo, sinon l'état du repo
          if [ -d "_site_prev" ] && [ -n "$(ls -A _site_prev 2>/dev/null)" ]; then
            cp -a _site_prev/. _site/
          else
            cp -a docs/. _site/
          fi
          # Met à jour uniquement HTML/JS/CSS depuis le repo
          rsync -a \
            --include="*/" \
            --include="**/*.html" --include="**/*.js" --include="**/*.css" \
            --exclude="docs/data/optimized/**" \
            --exclude="*" \
            docs/ _site/

          # Filets de sécurité: s'assurer que les JSON existent
          mkdir -p _site/data/optimized
          for f in meta_v1.json agg_v1.json summary_v1.json manifest.json prev_week_compressed.json; do
            [ -s "_site/data/optimized/$f" ] || echo '{}' > "_site/data/optimized/$f"
          done
          ls -la _site/data/optimized || true

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v5

      - name: 📦 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: 🚀 Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: ✅ Summary
        run: |
          echo "## 🚀 Fast Deploy Complete" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY